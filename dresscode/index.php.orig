<?php
require 'vendor/autoload.php';
use Corneltek\PreviewSystem\TemplateDirs;
use Corneltek\PreviewSystem\VirtualPath;
use Corneltek\PreviewSystem\MySplFileInfo;
use Corneltek\PreviewSystem\Preview;
use Symfony\Component\Yaml\Yaml;

/*
 $array = Yaml::parse($file);
 print Yaml::dump($array);
 */

global $pathinfo;


function get_pathinfo()
{
    $pathinfo = @$_SERVER['PATH_INFO'];
    if ( !$pathinfo ) {
        header('Location: index.php/design/');
        exit;
    }
    return ltrim($pathinfo,'/'); # trim path info url
}


function get_twig($loader = null)
{
    if( ! $loader ) {
        $template_dirs = TemplateDirs::get();
        $loader = new Twig_Loader_Filesystem( $template_dirs );
    }

    # $twig = new Twig_Environment($loader, array( 'cache' => 'cache',));
    $twig = new Twig_Environment($loader, array(
        'auto_reload' => true,
    ) );

    // use spl class loader to check class.
    if ( class_exists('Twig_Extensions_Extension_Text',true) ) {
        $text = new \Twig_Extensions_Extension_Text;
        $twig->addExtension( $text );
    }

    if ( class_exists('Twig_Extensions_Extension_Debug',true) ) {
        $debug = new \Twig_Extensions_Extension_Debug;
        $twig->addExtension( $debug );
    }

    if( class_exists('Twig_Extension_Markdown',true) ) {
        $markdown = new \Twig_Extension_Markdown;
        $twig->addExtension( $markdown );
    }
    return $twig;
}


class VirtualIndex
{
    public $path;

    public function __construct( $path )
    {
        if( ! is_dir( $path ) )
            throw new Exception( "Can not indexing, '$path' is not a directory." );
        $this->path = $path;
    }

    public function find()
    {
        $files = array();
        $iterator = new DirectoryIterator($this->path);
        foreach ($iterator as $fileinfo) {
            if( $fileinfo->isDot() )
                continue;


            $filename = $fileinfo->getFilename();
            if( $filename[0] == '.' )
                continue;

            # var_dump( $fileinfo->getFilename() ); 
            $files[] = new MySplFileInfo( $fileinfo->getPathname() );
        }
        usort($files,function($a,$b) {
            if( $a->isDir() && $b->isDir() || $a->isFile() && $b->isFile() ) {
                return strcmp( $a->getFilename() , $b->getFilename() );
            } 
            else {
                return $a->isFile() ? 1 : -1;
            }
        });
        return $files;
    }

    function template()
    {
        return file_get_contents("src/Corneltek/PreviewSystem/Templates/dir.twig.html");
    }


    /**
     * Display the directory index.
     */
    public function display()
    {
        $files = $this->find();
        $templateString = $this->template();
        $loader = new \Twig_Loader_String();

        putenv('PATH=/bin:/usr/bin:/usr/local/bin:/opt/local/bin');
        $revinfo = Preview::get_hg_revision();
        $rev = null;
        $hash = null;
        if (count($revinfo) == 2) {
            list($rev,$hash) = $revinfo;
        }

        $projectName = basename(getcwd());
        $twig = get_twig($loader);
        $pathinfo = new MySplFileInfo( $this->path );

        $readme = '';
        $readmeFile = $this->path . DIRECTORY_SEPARATOR . 'README.txt';
        if ( file_exists($readmeFile) ) {
            $readme = file_get_contents($readmeFile);
        }


        $template = $twig->loadTemplate( $templateString );
        $template->display( array( 
            'Rev' => $rev,
            'Hash' => $hash,
            'Files' => $files,
            'Readme' => $readme,
            'ProjectName' => $projectName,
            'CurrentPath' => $this->path,
            'ParentPath'  => $pathinfo->getPath(),
            'PhpVersion' => phpversion(),
        ) );
    }
}

$pathinfo = get_pathinfo();

TemplateDirs::add( dirname($pathinfo) );
TemplateDirs::add( 'design' . DIRECTORY_SEPARATOR );
TemplateDirs::add( getcwd() );

$vpath = new VirtualPath( $pathinfo );
$ext = $vpath->getExtension();

do {

    if( ! $vpath->isReadable() ) {
        header('HTTP/1.1 404');
        die('File not found.');
    }

    if( is_dir( $pathinfo ) ) {
        $index = new VirtualIndex( $pathinfo );
        $index->display();
        exit(0);
        break;
    }
    elseif( is_file( $pathinfo ) && ( $ext == 'html' || $ext == 'htm' || $ext == 'twig' ) ) {
        $template_file = basename($pathinfo);
        $twig = get_twig();
        $template = $twig->loadTemplate( $template_file );
        $content = $template->render(array());

        // filter out java i18n tag
        $content = preg_replace('#{(?<TAG>\w+).*?}(.*?){/\k<TAG>}#', '$2', $content );
        echo $content;

        $currentUrl = urlencode("http://" . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI']);

        if ( $_SERVER["HTTP_HOST"] !== "localhost" ) {
            $qrcodeTemplate = $twig->loadTemplate("src/Corneltek/PreviewSystem/Templates/qrcode.twig.html");
            $qrcodeTemplate->display(array(
                'currentUrl' => $currentUrl
            ));
        }
        break;
    }
    elseif( is_file($pathinfo) && ( $ext == "php" ) ) {
        require( $pathinfo );
        break;
    }
    else {
        /* if not so, redirect to the original path */

        // var_dump( $_SERVER );
        $fn = $_SERVER['SCRIPT_NAME'];
        header("Cache-Control: no-cache, must-revalidate"); // HTTP/1.1
        // var_dump( dirname( $fn ) );
        $url = dirname($fn) . '/' . $pathinfo;
        header("Location: $url");
        break;
    }

} while( 0 );
